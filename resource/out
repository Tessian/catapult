#!/bin/bash
# vim: set ft=sh

set -ex

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>" >&2
  exit 1
fi

cd "$source"

# save the input in a tmp file
payload=$(mktemp /tmp/resource-check.XXXXXX)

cat > "$payload" <&0

# project/app name
name=$(jq -r '.source.name' < "$payload")
# S3 bucket where the release file is stored
bucket=$(jq -r '.source.bucket // ""' < "$payload")
# commit ref to release
repository=$(jq -r '.params.repository // ""' < "$payload")
# file containing the image ID to release
image_id_file=$(jq -r '.params.image_id // ""' < "$payload")
# new version
version_file=$(jq -r '.params.version // ""' < "$payload")
# flag for deploy releases
is_deploy=$(jq -r '.source.is_deploy // false' < "$payload")
# environment's name
environment=$(jq -r '.source.environment // "staging"' < "$payload")
export environment
# bucket containing the environment deploys
deploy_bucket=$(jq -r ".source.deploy_bucket" < "$payload")
export deploy_bucket

# AWS credentials
AWS_ACCESS_KEY_ID=$(jq -r '.source.aws_access_key_id // ""' < "$payload")
export AWS_ACCESS_KEY_ID

AWS_SECRET_ACCESS_KEY=$(jq -r '.source.aws_secret_access_key // ""' < "$payload")
export AWS_SECRET_ACCESS_KEY

AWS_SESSION_TOKEN=$(jq -r '.source.aws_session_token // ""' < "$payload")
export AWS_SESSION_TOKEN

mkdir -p ~/.aws/
echo "[default]
aws_access_key_id=$AWS_ACCESS_KEY_ID
aws_secret_access_key=$AWS_SECRET_ACCESS_KEY
aws_session_token=$AWS_SESSION_TOKEN
" > ~/.aws/credentials

export CATAPULT_AWS_PROFILE="default"

if [ -z "$name" ]; then
  echo "parameter 'name' is required"
  exit 1
fi

if [ -z "$repository" ]; then
  echo "parameter 'repository' is required"
  exit 1
fi

version_arg=""
if [ -n "$version_file" ]; then
  version_arg=--version=$(cat "$version_file")
fi

image_id_arg=""
if [ -n "$image_id_file" ]; then
  image_id_arg=--image-id=$(cat "$image_id_file")
fi


if [ -n "$bucket" ]; then
  export CATAPULT_BUCKET_RELEASES=$bucket
fi

release=$(mktemp /tmp/release.XXXXXX)

cd "$repository"

if [ "$is_deploy" = "true" ]; then
    if [ -z "$deploy_bucket" ]; then
      echo "parameter 'deploy_bucket' is required when 'is_deploy' is true"
      exit 1
    fi

    catapult deploy.start "$name" "$environment" "$version_arg" --bucket="$deploy_bucket" --yes > "$release"
else
    if [ -z "$image_id_file" ]; then
      echo "parameter 'image_id_file' is required when 'is_deploy' is false"
      exit 1
    fi

    catapult release.new "$name" $version_arg $image_id_arg --yes > "$release"
fi

version=$(jq -r '.version' < "$release")
export version
author=$(jq -r '.author' < "$release")
export author
commit=$(jq -r '.commit' < "$release")
export commit
image=$(jq -r '.image' < "$release")
export image
changelog=$(jq -r '.changelog' < "$release")
export changelog
s3_version_id=$(jq -r '.version_id' < "$release")
export s3_version_id

if [ "$is_deploy" = "true" ]; then
    jq -n '{
      version: {
        version: env.version,
        deploy: env.s3_version_id
      },
      metadata: [
        { name: "commit", value: env.commit },
        { name: "author", value: env.author },
        { name: "image id", value: env.image },
        { name: "s3 version id", value: env.s3_version_id },
        { name: "changelog", value: env.changelog },
        { name: "environment", value: env.environment }
      ]
    }' >&3
else
    jq -n '{
      version: {
        version: env.version
      },
      metadata: [
        { name: "commit", value: env.commit },
        { name: "author", value: env.author },
        { name: "image id", value: env.image },
        { name: "s3 version id", value: env.s3_version_id },
        { name: "changelog", value: env.changelog }
      ]
    }' >&3
fi

